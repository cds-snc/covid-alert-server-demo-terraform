name: "Terraform"

on:
  push:
    branches:
      - master
  pull_request:
    paths:
      - "server/aws/**"
      - ".github/workflows/*"

defaults:
  run:
    shell: bash
    working-directory: server/aws

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ca-central-1
  BACKEND_BUCKET: ${{ secrets.BACKEND_BUCKET }}
  TF_VAR_ecs_task_key_retrieval_env_hmac_key: ${{ secrets.TF_VAR_ecs_task_key_retrieval_env_hmac_key }}
  TF_VAR_ecs_task_key_retrieval_env_ecdsa_key: ${{ secrets.TF_VAR_ecs_task_key_retrieval_env_ecdsa_key }}
  TF_VAR_ecs_task_key_submission_env_key_claim_token: ${{ secrets.TF_VAR_ecs_task_key_submission_env_key_claim_token }}
  TF_VAR_rds_server_db_password: ${{ secrets.TF_VAR_rds_server_db_password }}
  TF_VAR_route53_zone_name: ${{ secrets.TF_VAR_route53_zone_name }}
  TF_VAR_new_key_claim_allow_list: ${{ secrets.TF_VAR_new_key_claim_allow_list }}
  TF_VAR_cloudfront_custom_header: ${{ secrets.TF_VAR_cloudfront_custom_header }}
  TF_VAR_environment: ${{ secrets.TF_VAR_environment }}
  TF_VAR_metrics_username: ${{ secrets.METRICS_USERNAME}}
  TF_VAR_metrics_password: ${{ secrets.METRICS_PASSWORD}}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TF_VAR_github_sha: ef00a18013fe5a8ca08e5932ea638606d15a7b2e

jobs:
  terraform-plan-security-scan:
    if: github.ref != 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Terraform security scan
        uses: triat/terraform-security-scan@v2.2.1
        with:
          tfsec_version: "v0.39.26"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: false

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.2

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -no-color
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Refresh
        id: refresh
        run: terraform refresh

      - name: Terraform Plan
        id: plan
        run: terraform plan -refresh=false -input=false -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"        
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Check Success
        if: ${{ ( success() || failure() ) && ( steps.fmt.outputs.exit_code  > 0 || steps.plan.outputs.exit_code == 1 ) }}
        run: |
          echo steps.fmt.outcome ${{ steps.fmt.outcome }}
          echo steps.plan.outcome ${{ steps.plan.outcome }}
          echo "(${{ steps.fmt.outcome }} == failure || ${{ steps.plan.outcome }} == failure)"
          exit 1

  terraform-apply:
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.2

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -input=false -out terraform.tfplan

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve terraform.tfplan
